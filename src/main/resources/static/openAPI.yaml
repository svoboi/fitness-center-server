openapi: 3.0.3
info:
  version: 1.0.0
  title: Fitness center backend API
  description: backend API for Fitness center
  contact:
    name: BackEnd support

servers:
  - url: http://localhost:8080

paths:
  /groupClasses:
    post:
      description: Register new class
      operationId: "register_group_class"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupClass'
            examples:
              ClassWithTrainers:
                $ref: '#/components/examples/ClassWithTrainers'
              ClassWithoutTrainers:
                $ref: '#/components/examples/ClassWithoutTrainers'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupClass'
        '400':
          description: Bad Format or user isn't trainer
        '409':
          description: Class ID is taken, user is busy or room doesn't have enough capacity
      tags:
        - GroupClass
    get:
      description: Get all classes
      operationId: "get_group_classes"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupClass'
      tags:
        - GroupClass

  /groupClasses/{id}:
    get:
      description: Get class by id
      operationId: "get_group_class"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the class to retrieve
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupClass'
        '404':
          description: Not Found
      tags:
        - GroupClass
    put:
      description: Put group class by id
      operationId: "put_group_class"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the group class to put
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupClass'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupClass'
        '400':
          description: Bad Format or user isn't trainer
        '404':
          description: Not Found
        '409':
          description: Class ID is taken, user is busy, room doesn't have enough capacity or conflicting ID in path and body
      tags:
        - GroupClass
    delete:
      description: Delete class by id
      operationId: "delete_group_class"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the class to delete
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      tags:
        - GroupClass

  /groupClasses/{classId}/trainers:
    put:
      description: Add new trainer to group class
      operationId: "add_trainer"
      parameters:
        - in: path
          name: classId
          required: true
          description: ID of the class to add trainer to
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                userId:
                  type: integer
                  example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupClass'
        '400':
          description: Bad Format or user isn't trainer
        '404':
          description: Not Found
        '409':
          description: Class ID is taken, user is busy, room doesn't have enough capacity
      tags:
        - GroupClass
    delete:
      description: Remove trainer from group class
      operationId: "remove_trainer"
      parameters:
        - in: path
          name: classId
          required: true
          description: ID of the class to remove trainer from
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                userId:
                  type: integer
                  example: 1
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '404':
          description: Not Found
      tags:
        - GroupClass

  /users:
    post:
      description: Register new user
      operationId: "register_user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              JaraCimrmanUser:
                $ref: '#/components/examples/UserJara'
              KarelGottUser:
                $ref: '#/components/examples/UserKarel'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Format
        '409':
          description: Username taken or user with this ID exists
      tags:
        - User
    get:
      description: Get all users
      operationId: "get_users"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      tags:
        - User

  /users/{id}:
    get:
      description: Get user by id
      operationId: "get_user"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
      tags:
        - User
    put:
      description: Put user by id
      operationId: "put_user"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user to put
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              JaraCimrmanUser:
                $ref: '#/components/examples/UserJara'
              KarelGottUser:
                $ref: '#/components/examples/UserKarel'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad format
        '404':
          description: Not Found
        '409':
          description: Username taken, user with this ID exists or conflicting ID in path and body
      tags:
        - User
    delete:
      description: Delete user by id
      operationId: "delete_user"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user to delete
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      tags:
        - User


  /users/{id}/hoursBetween:
    get:
      description: Get number of hours that trainer worked for in given timeframe
      operationId: "count_hours"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user to count hours for
          schema:
            type: integer
            example: 1
        - in: query
          name: timeFrom
          schema:
            type: string
            format: date-time
            example: "2023-02-21T15:00:00"
          description: Start of timeframe
        - in: query
          name: timeTo
          schema:
            type: string
            format: date-time
            example: "2023-02-21T17:00:00"
          description: End of timeframe
      responses:
        '200':
          description: OK
        '404':
          description: User not found
      tags:
        - User

  /users/available/{username}:
    get:
      description: Check if username is available
      operationId: "username_availability"
      parameters:
        - in: path
          name: username
          required: true
          description: Username to check
          schema:
            type: string
            example: jara
      responses:
        '204':
          description: Available username
        '409':
          description: Taken username
      tags:
        - User

  /rooms:
    post:
      description: Register new room
      operationId: "register_room"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Bad Format
        '409':
          description: Room with this ID exists
      tags:
        - Room
    get:
      description: Get all rooms
      operationId: "get_rooms"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
      tags:
        - Room

  /rooms/{id}:
    get:
      description: Get room by id
      operationId: "get_room"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the room to retrieve
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: Not Found
      tags:
        - Room
    put:
      description: Put room by id
      operationId: "put_room"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the room to put
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: Not Found
        '409':
          description: Conflicting ID in path and body
      tags:
        - Room
    delete:
      description: Delete room by id
      operationId: "delete_room"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the room to delete
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      tags:
        - Room

  /sportTypes:
    post:
      description: Register new sport type
      operationId: "register_sport_type"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SportType'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SportType'
        '400':
          description: Bad Request
        '409':
          description: SportType with this ID already exists
      tags:
        - SportType
    get:
      description: Get all sport types
      operationId: "get_sport_types"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SportType'
      tags:
        - SportType

  /sportTypes/{id}:
    get:
      description: Get sport type by id
      operationId: "get_sport_type"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the sport type to retrieve
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SportType'
        '404':
          description: Not Found
      tags:
        - SportType
    put:
      description: Put sport type by id
      operationId: "put_sport_type"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the sport type to put
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SportType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SportType'
        '404':
          description: Not Found
        '409':
          description: Conflicting ID in path and body
      tags:
        - SportType
    delete:
      description: Delete sport type by id
      operationId: "delete_sport_type"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the sport type to delete
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      tags:
        - SportType


components:
  schemas:
    GroupClass:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        timeFrom:
          type: string
          format: date-time
          example: "2017-07-21T09:30:00"
        timeTo:
          type: string
          format: date-time
          example: "2017-07-21T10:30:00"
        capacity:
          type: number
          format: int64
          example: 10
        room:
          $ref: '#/components/schemas/Room'
        sportType:
          $ref: '#/components/schemas/SportType'
        trainers:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
          example: [ { "id": 1 }, { "id": 2 } ]
      required:
        - timeFrom
        - timeTo
        - capacity
        - room
        - sportType
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        firstName:
          type: string
          example: "Troy"
        lastName:
          type: string
          example: "Bolton"
        username:
          type: string
          example: "troybolton"
        password:
          type: string
          example: "password123"
        emailAddress:
          type: string
          format: email
          example: "troy.bolton@easthigh.com"
        phoneNumber:
          type: number
          format: int64
          example: 10
        employee:
          type: boolean
          example: false
        customer:
          type: boolean
          example: true
      required:
        - firstName
        - lastName
        - username
        - password
        - emailAddress
        - employee
        - customer
    Room:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        capacity:
          type: integer
          format: int64
          example: 100
        name:
          type: string
          example: "big gym"
    SportType:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        typeName:
          type: string
          example: "joga"

  examples:
    UserJara:
      value:
        id: 1
        firstName: "Jara"
        lastName: "Cimrman"
        username: "jara"
        password: "cimrman123"
        emailAddress: "jarek@cimrman.cz"
        phoneNumber: 987654321
        employee: true
        customer: true
    UserKarel:
      value:
        id: 2
        firstName: "Karel"
        lastName: "Gott"
        username: "karel"
        password: "gott123"
        emailAddress: "kaja@gottu.cz"
        phoneNumber: 987654321
        employee: false
        customer: false
    ClassWithTrainers:
      value:
        id: 1
        timeFrom: "2023-02-21T15:00:00"
        timeTo: "2023-02-21T16:30:00"
        capacity: 100
        room: { "id": 1 }
        sportType: { "id": 1 }
        trainers: [ { "id": 1 }, { "id": 2 } ]
    ClassWithoutTrainers:
      value:
        id: 2
        timeFrom: "2023-02-21T15:00:00"
        timeTo: "2023-02-21T16:30:00"
        capacity: 100
        room: { "id": 1 }
        sportType: { "id": 1 }


tags:
  - name: GroupClass
    description: Everything about group classes
  - name: User
    description: Everything about users
  - name: Room
    description: Everything about rooms
  - name: SportType
    description: Everything about sport types
